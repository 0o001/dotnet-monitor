# Divide By Zero debugging scenario
# 1) load the executable
# 2) Run the executable and wait for it to crash
# 3) Take a dump of the executable.
# 4) Open the dump and compare the output

LOADSOS

IFDEF:LIVE
CONTINUE
ENDIF:LIVE

# Verifying that PrintException gives us the right exception in the format above.
SOSCOMMAND:PrintException

VERIFY:Exception object:\s+<HEXVAL>\s+
VERIFY:Exception type:\s+System\.DivideByZeroException\s+
VERIFY:Message:\s+(<Invalid Object>|Attempted to divide by zero\.)\s+
VERIFY:InnerException:\s+<none>\s+
VERIFY:StackTrace \(generated\):\s+
VERIFY:\s+SP\s+IP\s+\s+Function\s+
VERIFY:\s+<HEXVAL>\s+<HEXVAL>\s+[Dd]iv[Zz]ero.*!C\.DivideByZero(\(.*\))?\+0x<HEXVAL>\s+
VERIFY:\s+<HEXVAL>\s+<HEXVAL>\s+[Dd]iv[Zz]ero.*!C\.F3(\(.*\))?\+0x<HEXVAL>\s+
VERIFY:\s+<HEXVAL>\s+<HEXVAL>\s+[Dd]iv[Zz]ero.*!C\.F2(\(.*\))?\+0x<HEXVAL>\s+
VERIFY:\s+<HEXVAL>\s+<HEXVAL>\s+[Dd]iv[Zz]ero.*!C\.Main(\(.*\))?\+0x<HEXVAL>\s+
VERIFY:(StackTraceString: <none>\s+)?\s+
VERIFY:HResult:\s+80020012\s+